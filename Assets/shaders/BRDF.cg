#ifndef PI
#define PI 3.14159265358f
#endif

float3 Sqrt(float3 val)
{
	return float3(sqrt(val.x), sqrt(val.y), sqrt(val.z));
}

float Sqrt(float val)
{
	return pow(val, 0.5);
}

float3 Square(float3 x)
{
	return x * x;
}

float Square(float x)
{
	return x * x;
}

float3 Fresnel( float3 SpecularColor, float VoH )
{
	float3 SpecularColorSqrt = sqrt( clamp( float3(0, 0, 0), float3(0.99, 0.99, 0.99), SpecularColor ) );
	float3 n = ( 1 + SpecularColorSqrt ) / ( 1 - SpecularColorSqrt );
	float3 g = sqrt( n*n + VoH*VoH - 1 );
	return 0.5 * Square( (g - VoH) / (g + VoH) ) * ( 1 + Square( ((g+VoH)*VoH - 1) / ((g-VoH)*VoH + 1) ) );
}

float3 F_Schlick(in float3 f0, in float f90, in float u)
{ 
	return f0 + (f90 - f0) * pow(1.f - u, 5.f);
}

float V_SmithGGXCorrelated(float NdotL, float NdotV , float alphaG) 
{ 
	float alphaG2 = alphaG * alphaG;
	float Lambda_GGXV = saturate(NdotL + 1e-5f) * Sqrt((-NdotV * alphaG2 + NdotV) * NdotV + alphaG2);
	float Lambda_GGXL = NdotV * Sqrt((-NdotL * alphaG2 + NdotL) * NdotL + alphaG2);
	return 0.5f / (Lambda_GGXV + Lambda_GGXL);
}

float D_GGX(float NdotH , float m)
{ 
	float m2 = m * m;
	float f = (NdotH * m2 - NdotH) * NdotH + 1;
	return m2 / (PI * (f * f));
}


float3 DisneyDiffuse_Extended(float NdotV , float NdotL , float LdotH ,float linearRoughness, float3 specularColor)
 {
	float energyBias = lerp(0, 0.5, linearRoughness);
	float energyFactor = lerp(1.0, 1.0 / 1.51, linearRoughness);
	float fd90 = energyBias + 2.0 * LdotH*LdotH * linearRoughness;
	float3 f0 = float3(1.0f, 1.0f, 1.0f);
	float lightScatter = F_Schlick(f0, fd90 , NdotL).r;
	float viewScatter = F_Schlick(f0, fd90 , NdotV).r;

	float burley = lightScatter * viewScatter * energyFactor;

	burley *= (1 - specularColor);

	float3 lambert = float3(1.f, 1.f, 1.f) - F_Schlick(specularColor, 1.0f, NdotL);

	return lerp(lambert, burley, linearRoughness) / PI;
}

float3 SpecularBRDF(float NoL, float NoV, float VoH, float NoH, float3 specularColor, float roughness)
{
	float mappedRoughness = roughness;
	return Fresnel(specularColor, VoH) * V_SmithGGXCorrelated(NoV, NoL, mappedRoughness) * D_GGX(NoH, mappedRoughness);
}